/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  UserContract,
  UserContractInterface,
} from "../../UserInfo.sol/UserContract";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "userAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "id",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "email",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "postalAddress",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "username",
        type: "string",
      },
    ],
    name: "UserUpdated",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "userAddress",
        type: "address",
      },
    ],
    name: "getUser",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "id",
            type: "string",
          },
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "string",
            name: "email",
            type: "string",
          },
          {
            internalType: "string",
            name: "postalAddress",
            type: "string",
          },
          {
            internalType: "string",
            name: "username",
            type: "string",
          },
        ],
        internalType: "struct UserContract.User",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "id",
        type: "string",
      },
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "email",
        type: "string",
      },
      {
        internalType: "string",
        name: "postalAddress",
        type: "string",
      },
      {
        internalType: "string",
        name: "username",
        type: "string",
      },
    ],
    name: "setUser",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "users",
    outputs: [
      {
        internalType: "string",
        name: "id",
        type: "string",
      },
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "email",
        type: "string",
      },
      {
        internalType: "string",
        name: "postalAddress",
        type: "string",
      },
      {
        internalType: "string",
        name: "username",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506111bf806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80636f77926b14610046578063a87430ba14610076578063ded0d76a146100aa575b600080fd5b610060600480360381019061005b9190610a03565b6100c6565b60405161006d9190610b52565b60405180910390f35b610090600480360381019061008b9190610a03565b6103f8565b6040516100a1959493929190610bbe565b60405180910390f35b6100c460048036038101906100bf9190610c99565b6106d6565b005b6100ce61096c565b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060a001604052908160008201805461012790610de5565b80601f016020809104026020016040519081016040528092919081815260200182805461015390610de5565b80156101a05780601f10610175576101008083540402835291602001916101a0565b820191906000526020600020905b81548152906001019060200180831161018357829003601f168201915b505050505081526020016001820180546101b990610de5565b80601f01602080910402602001604051908101604052809291908181526020018280546101e590610de5565b80156102325780601f1061020757610100808354040283529160200191610232565b820191906000526020600020905b81548152906001019060200180831161021557829003601f168201915b5050505050815260200160028201805461024b90610de5565b80601f016020809104026020016040519081016040528092919081815260200182805461027790610de5565b80156102c45780601f10610299576101008083540402835291602001916102c4565b820191906000526020600020905b8154815290600101906020018083116102a757829003601f168201915b505050505081526020016003820180546102dd90610de5565b80601f016020809104026020016040519081016040528092919081815260200182805461030990610de5565b80156103565780601f1061032b57610100808354040283529160200191610356565b820191906000526020600020905b81548152906001019060200180831161033957829003601f168201915b5050505050815260200160048201805461036f90610de5565b80601f016020809104026020016040519081016040528092919081815260200182805461039b90610de5565b80156103e85780601f106103bd576101008083540402835291602001916103e8565b820191906000526020600020905b8154815290600101906020018083116103cb57829003601f168201915b5050505050815250509050919050565b600060205280600052604060002060009150905080600001805461041b90610de5565b80601f016020809104026020016040519081016040528092919081815260200182805461044790610de5565b80156104945780601f1061046957610100808354040283529160200191610494565b820191906000526020600020905b81548152906001019060200180831161047757829003601f168201915b5050505050908060010180546104a990610de5565b80601f01602080910402602001604051908101604052809291908181526020018280546104d590610de5565b80156105225780601f106104f757610100808354040283529160200191610522565b820191906000526020600020905b81548152906001019060200180831161050557829003601f168201915b50505050509080600201805461053790610de5565b80601f016020809104026020016040519081016040528092919081815260200182805461056390610de5565b80156105b05780601f10610585576101008083540402835291602001916105b0565b820191906000526020600020905b81548152906001019060200180831161059357829003601f168201915b5050505050908060030180546105c590610de5565b80601f01602080910402602001604051908101604052809291908181526020018280546105f190610de5565b801561063e5780601f106106135761010080835404028352916020019161063e565b820191906000526020600020905b81548152906001019060200180831161062157829003601f168201915b50505050509080600401805461065390610de5565b80601f016020809104026020016040519081016040528092919081815260200182805461067f90610de5565b80156106cc5780601f106106a1576101008083540402835291602001916106cc565b820191906000526020600020905b8154815290600101906020018083116106af57829003601f168201915b5050505050905085565b6040518060a001604052808b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050815260200189898080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050815260200187878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050815260200185858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050815260200183838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508152506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000190816108a49190610ffb565b5060208201518160010190816108ba9190610ffb565b5060408201518160020190816108d09190610ffb565b5060608201518160030190816108e69190610ffb565b5060808201518160040190816108fc9190610ffb565b509050503373ffffffffffffffffffffffffffffffffffffffff167f1f34688f6d99f40c394d23e645c31f695ee26b9be642fb83778e938f690e27d28b8b8b8b8b8b8b8b8b8b6040516109589a99989796959493929190611109565b60405180910390a250505050505050505050565b6040518060a0016040528060608152602001606081526020016060815260200160608152602001606081525090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006109d0826109a5565b9050919050565b6109e0816109c5565b81146109eb57600080fd5b50565b6000813590506109fd816109d7565b92915050565b600060208284031215610a1957610a1861099b565b5b6000610a27848285016109ee565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610a6a578082015181840152602081019050610a4f565b60008484015250505050565b6000601f19601f8301169050919050565b6000610a9282610a30565b610a9c8185610a3b565b9350610aac818560208601610a4c565b610ab581610a76565b840191505092915050565b600060a0830160008301518482036000860152610add8282610a87565b91505060208301518482036020860152610af78282610a87565b91505060408301518482036040860152610b118282610a87565b91505060608301518482036060860152610b2b8282610a87565b91505060808301518482036080860152610b458282610a87565b9150508091505092915050565b60006020820190508181036000830152610b6c8184610ac0565b905092915050565b600082825260208201905092915050565b6000610b9082610a30565b610b9a8185610b74565b9350610baa818560208601610a4c565b610bb381610a76565b840191505092915050565b600060a0820190508181036000830152610bd88188610b85565b90508181036020830152610bec8187610b85565b90508181036040830152610c008186610b85565b90508181036060830152610c148185610b85565b90508181036080830152610c288184610b85565b90509695505050505050565b600080fd5b600080fd5b600080fd5b60008083601f840112610c5957610c58610c34565b5b8235905067ffffffffffffffff811115610c7657610c75610c39565b5b602083019150836001820283011115610c9257610c91610c3e565b5b9250929050565b60008060008060008060008060008060a08b8d031215610cbc57610cbb61099b565b5b60008b013567ffffffffffffffff811115610cda57610cd96109a0565b5b610ce68d828e01610c43565b9a509a505060208b013567ffffffffffffffff811115610d0957610d086109a0565b5b610d158d828e01610c43565b985098505060408b013567ffffffffffffffff811115610d3857610d376109a0565b5b610d448d828e01610c43565b965096505060608b013567ffffffffffffffff811115610d6757610d666109a0565b5b610d738d828e01610c43565b945094505060808b013567ffffffffffffffff811115610d9657610d956109a0565b5b610da28d828e01610c43565b92509250509295989b9194979a5092959850565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610dfd57607f821691505b602082108103610e1057610e0f610db6565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302610ea77fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610e6a565b610eb18683610e6a565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000610ef8610ef3610eee84610ec9565b610ed3565b610ec9565b9050919050565b6000819050919050565b610f1283610edd565b610f26610f1e82610eff565b848454610e77565b825550505050565b600090565b610f3b610f2e565b610f46818484610f09565b505050565b5b81811015610f6a57610f5f600082610f33565b600181019050610f4c565b5050565b601f821115610faf57610f8081610e45565b610f8984610e5a565b81016020851015610f98578190505b610fac610fa485610e5a565b830182610f4b565b50505b505050565b600082821c905092915050565b6000610fd260001984600802610fb4565b1980831691505092915050565b6000610feb8383610fc1565b9150826002028217905092915050565b61100482610a30565b67ffffffffffffffff81111561101d5761101c610e16565b5b6110278254610de5565b611032828285610f6e565b600060209050601f8311600181146110655760008415611053578287015190505b61105d8582610fdf565b8655506110c5565b601f19841661107386610e45565b60005b8281101561109b57848901518255600182019150602085019450602081019050611076565b868310156110b857848901516110b4601f891682610fc1565b8355505b6001600288020188555050505b505050505050565b82818337600083830152505050565b60006110e88385610b74565b93506110f58385846110cd565b6110fe83610a76565b840190509392505050565b600060a0820190508181036000830152611124818c8e6110dc565b90508181036020830152611139818a8c6110dc565b9050818103604083015261114e81888a6110dc565b905081810360608301526111638186886110dc565b905081810360808301526111788184866110dc565b90509b9a505050505050505050505056fea26469706673582212204c631f7c5d10a5d78a06ef886a9f3f509da93fad6dcca8d2521ad2569e82795f64736f6c63430008180033";

type UserContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: UserContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class UserContract__factory extends ContractFactory {
  constructor(...args: UserContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      UserContract & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): UserContract__factory {
    return super.connect(runner) as UserContract__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): UserContractInterface {
    return new Interface(_abi) as UserContractInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): UserContract {
    return new Contract(address, _abi, runner) as unknown as UserContract;
  }
}
